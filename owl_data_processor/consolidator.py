"""Collection of classes that are used for consolidating log data.
"""

from __future__ import annotations
from bisect import bisect_left, bisect_right

from typing import Optional
from .types import RangeView, Entry, EntryData, WindowData


class ConsolidatedOwlLogs:
    """Readonly container for consolidated owl logs."""

    _entries: list[Entry]
    _paths: list[str]
    _titles: list[str]

    def __init__(self, entries: list[Entry], paths: list[str], titles: list[str]):
        """
        Parameters
        ----------
        entries : list[Entry]
            List of owl entries
        paths : list[str]
            List of window paths used.
            Typically generated by :meth:`ConsolidatorDictionary.generate_values_list`
        titles : list[str]
            List of window titles used.
            Typically generated by :meth:`ConsolidatorDictionary.generate_values_list`
        """
        self._entries = entries
        self._paths = paths
        self._titles = titles

    def get_size(self) -> int:
        """Get the number of entries stored."""
        return len(self._entries)

    def get_entries_view(self, start_time: int, end_time: int) -> RangeView[Entry]:
        """Get a list of entries between `start_time` (inclusive)
        and `end_time` (inclusive).

        Parameters
        ----------
        start_time : int
            UNIX timestamp of the start time.
        end_time : int
            UNIX timestamp of the end time.

        Returns
        -------
        DataView[Entry]
            Readonly entries dataview.
        """
        start_i = bisect_left(
            self._entries, start_time, key=lambda x: x.get_timestamp()
        )
        end_i = bisect_right(self._entries, end_time, key=lambda x: x.get_timestamp())

        return RangeView(start_i, start_i - end_i, self._entries)

    def get_time_range(self) -> tuple[int, int]:
        """Get the time range of the entries.

        Returns
        -------
        tuple[int, int]
            Earliest log timestamp, and latest log timestamp.
        """
        earliest = self._entries[0].get_timestamp()
        latest = self._entries[-1].get_timestamp()
        return (earliest, latest)


class ConsolidatorDictionary:
    """A wrapper of a dictionary intended to store values and
    their index. This class is used to reduce redundant data
    being stored in memory/file.

    It provides a :meth:`use_value` method that takes a value
    as input, and returns a unique number representing it.

    In order to get the value represented by a number, you will
    need to get the list of values in the dictionary by calling
    :meth:`generate_values_list`, and using the unique number
    as index for the list. See the examples below for more
    clarity.

    Examples
    --------
    >>> limb_dict = ConsolidatorDictionary()
    >>> limbs = []
    >>> limbs.append(limb_dict.use_value("head"))
    >>> limbs.append(limb_dict.use_value("arm"))
    >>> limbs.append(limb_dict.use_value("arm"))
    >>> limbs.append(limb_dict.use_value("leg"))
    >>> limbs.append(limb_dict.use_value("leg"))
    >>> print(limbs)
    [0, 1, 1, 2, 2]
    >>> limbs_list = limb_dict.generate_values_list()
    >>> print(limb_list[limbs[2]])
    arm
    """

    _dict: dict[str, int]
    _size = 0

    def __init__(self):
        self._dict = {}

    def use_value(self, value: str) -> int:
        """Gets or creates the unique dictionary index
        for `value`.

        Parameters
        ----------
        value : str
            Value to be referenced from the dictionary.

        Returns
        -------
        int
            The dictionary index for `value`
        """
        if value in self._dict:
            return self._dict[value]

        self._dict[value] = self._size
        self._size += 1

        return self._dict[value]

    def generate_values_list(self) -> list[str]:
        """Generates a list of values that has been used.

        Returns
        -------
        list[str]
            List of values
        """
        values = [""] * self._size
        for value, index in self._dict.items():
            values[index] = value

        return values


class Consolidator:
    """Class used to consolidate multiple entries into a unified object."""

    _path_cd: ConsolidatorDictionary
    _title_cd: ConsolidatorDictionary

    _entries: list[_Entry]

    def __init__(self):
        self._path_cd = ConsolidatorDictionary()
        self._title_cd = ConsolidatorDictionary()

    def insert_entry(self, entry: EntryData):
        """Insert entry to consolidate.

        Parameters
        ----------
        entry : EntryData
            Entry data
        """
        self._entries.append(_Entry(entry, self._path_cd, self._title_cd))

    def generate_col(self):
        """Generate a consolidated owl logs object."""
        pass


class _Window:
    """One-off private class to store window data
    only to be used in :class:`Consolidator`.
    """

    _path_i: int
    _title_i: int
    _is_active: bool

    __slots__ = ("_path_i", "_title_i", "_is_active")

    def __init__(self, path_i: int, title_i: int, is_active=False):
        """
        Parameters
        ----------
        path_i : int
            Window path's index
        title_i : int
            Window title's index
        is_active : bool, optional
            True if the user is active in the window, by default False
        """
        self._path_i = path_i
        self._title_i = title_i
        self._is_active = is_active

    @classmethod
    def from_window_data(
        self,
        window: WindowData,
        path_cd: ConsolidatorDictionary,
        title_cd: ConsolidatorDictionary,
    ) -> _Window:
        """Create window structure from :class:`.types.WindowData`,
        and path and title :class:`ConsolidatorDictionary`.

        Parameters
        ----------
        window : WindowData
            Window data
        path_cd : ConsolidatorDictionary
            Paths dictionary
        title_cd : ConsolidatorDictionary
            Titles dictionary

        Returns
        -------
        _Window
        """
        path_i = path_cd.use_value(window["path"])
        title_i = title_cd.use_value(window["title"])

        is_active = False
        if "isActive" in window:
            is_active = window["isActive"]

        return _Window(path_i, title_i, is_active)

    @property
    def path_i(self):
        """Window path dictionary index"""
        return self._path_i

    @property
    def title_i(self):
        """Window title dictionary index"""
        return self._title_i

    @property
    def is_active(self):
        """True if user is active in the window,
        False otherwise
        """
        return self._is_active


class _Entry:
    """One-off private class to store entry data
    only to be used in :class:`Consolidator`.
    """

    _timestamp: int
    _duration_since_last_input: Optional[int]
    _windows: list[_Window]

    __slots__ = ("_timestamp", "_duration_since_last_input", "_windows")

    def __init__(
        self,
        entry: EntryData,
        path_cd: ConsolidatorDictionary,
        title_cd: ConsolidatorDictionary,
    ):
        """Constructs Entry."""
        self._windows = []

        self._timestamp = entry["timestamp"]
        self._duration_since_last_input = entry["durationSinceLastUserInput"]

        if "windows" in entry:
            for w in entry["windows"]:
                self._windows.append(_Window(w, path_cd, title_cd))

    @property
    def timestamp(self):
        """Timestamp when the entry was recorded."""
        return self._timestamp

    @property
    def duration_since_last_input(self):
        """Duration since last user input."""
        return self._duration_since_last_input

    @property
    def windows(self):
        """Windows captured."""
        return self._windows
